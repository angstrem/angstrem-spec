

fn positive (seq)
{
	seq.filter(isPositive)
}

fn negative (seq)
{
	seq.filter(isPositive.not)
}

fn isPositive (value)
{
	value > 0
}

fn odd (seq)
{
	return seq.filter((item){ item % 2 == 1 })
}

fn even (seq)
{
	return seq.filter({ @[1] % 2 == 0 })
	// @ - arguments, @[1], @.1 - first argument
}

fn onlyGreater (limit)
{
	fn "isGreaterThen:{{ limit }}" (item; limit) // only limit in closure
	{
		item > limit;
	}
}

console.log([ 1, 3, 7, 11 ].filter(onlyGreater(5))); // [ 7, 11 ]

fn sideEffect (x)
{
	emitter(x);
	return; // not emitter return value
}

pow = fn (number, base)
{
	if (base == 0)
	{
		1
	}
	else if (base == 1)
	{
		number
	}
	else if (base > 1)
	{
		number * @.fn(number, base - 1)
		// @.fn contains function self-reference
		// even if it has no name
	}
	else
	{
		1 / @.fn(number, -base)
	}
}
